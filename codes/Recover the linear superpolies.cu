#include <stdio.h>
#include <stdint.h>
#include <assert.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;

// CUDA runtime
#include <cuda_runtime.h>
// helper functions and utilities to work with CUDA
#include <device_launch_parameters.h>


typedef unsigned char u8;
typedef unsigned int u32;
typedef unsigned long long u64;


#define N 31
#define count 2147483648
#define THREAD_NUM 1024
#define BLOCK_NUM 1024

// #define N 15
// #define count 32768
// #define THREAD_NUM 1024
// #define BLOCK_NUM 32


// #define N 7
// #define count 128
// #define THREAD_NUM 32
// #define BLOCK_NUM 4


// #define N 3
// #define count 8
// #define THREAD_NUM 4
// #define BLOCK_NUM 2

__device__ u64 ROR(u64 x, int n) 
{
    return x >> n | x << (-n & 63);
}


__device__ void ROUND(u64* state, u8 C) 
{
    u64 temp[5];
    /* addition of round constant */
    state[2] ^= C;
    /* printstate(" round constant", s); */
    /* substitution layer */
    state[0] ^= state[4];
    state[4] ^= state[3];
    state[2] ^= state[1];
    /* start of keccak s-box */
    temp[0] = state[0] ^ (~state[1] & state[2]);
    temp[1] = state[1] ^ (~state[2] & state[3]);
    temp[2] = state[2] ^ (~state[3] & state[4]);
    temp[3] = state[3] ^ (~state[4] & state[0]);
    temp[4] = state[4] ^ (~state[0] & state[1]);
    /* end of keccak s-box */
    temp[1] ^= temp[0];
    temp[0] ^= temp[4];
    temp[3] ^= temp[2];
    temp[2] = ~temp[2];
    /* printstate(" substitution layer", &t); */
    /* linear diffusion layer */
    state[0] = temp[0] ^ ROR(temp[0], 19) ^ ROR(temp[0], 28);
    state[1] = temp[1] ^ ROR(temp[1], 61) ^ ROR(temp[1], 39);
    state[2] = temp[2] ^ ROR(temp[2], 1) ^ ROR(temp[2], 6);
    state[3] = temp[3] ^ ROR(temp[3], 10) ^ ROR(temp[3], 17);
    state[4] = temp[4] ^ ROR(temp[4], 7) ^ ROR(temp[4], 41);
}


__device__ u64 ASCON(u8* gpu_key, u64 gpu_Ka, u8* gpu_iv, u64 num)
{
    u32 value[N] = { 0 };
    u32 IV[2] = { 0,0 };
    u32 i;
    for (i = 0; i < N; i++)
        value[i] = ((num >> i) & 0x01);
    for (i = 0; i < N; i++)
        if (value[i] == 1)
            IV[(gpu_iv[i] >> 5)] |= value[i] << (31 - (gpu_iv[i] & 0x1f));


    u64 K=0x00;
    for (i = 0; i < 8; i++)
    {
        K = (K << 8) | gpu_key[i];
    }

    /* initialize */
    u64 state[5];
    state[0] = 0x80400C0600000000;
    state[1] = gpu_Ka;
    state[2] = K;
    state[3] = 0x00;
    state[4] = IV[0];
    state[4] = (state[4] << 32) | IV[1];


    ROUND(state, 0xf0);
    ROUND(state, 0xe1);
    ROUND(state, 0xd2);
    ROUND(state, 0xc3);
    ROUND(state, 0xb4);
    ROUND(state, 0xa5);
    //ROUND(state, 0x96);

    return state[0];
}



__global__ void kernel(u64* gpu_truthtable, u8* gpu_key, u64 gpu_Ka, u8* gpu_pos)
{

    const  u64 tidx = threadIdx.x;
    const  u64 bid = blockIdx.x;
    u64 result = 0;
    for (u64 i = bid * THREAD_NUM + tidx; i < count; i = i + BLOCK_NUM * THREAD_NUM)
    {
        result ^= ASCON(gpu_key, gpu_Ka, gpu_pos, i);
    }
    gpu_truthtable[bid * THREAD_NUM + tidx] = result;
}


u64 excute(u8* Key, u64 Ka, u8* Pos)
{
    u8* gpu_key, * gpu_pos;
    u64* gpu_truthtable;
    u64* truthtable = (u64*)calloc(THREAD_NUM * BLOCK_NUM, sizeof(u64));

    cudaMalloc((void**)&gpu_truthtable, THREAD_NUM * BLOCK_NUM * sizeof(u64));
    cudaMalloc((void**)&gpu_key, 8 * sizeof(u8));
    cudaMalloc((void**)&gpu_pos, N * sizeof(u8));

    cudaMemcpy(gpu_key, Key, 8 * sizeof(u8), cudaMemcpyHostToDevice);
    cudaMemcpy(gpu_pos, Pos, N * sizeof(u8), cudaMemcpyHostToDevice);

    kernel << <BLOCK_NUM, THREAD_NUM >> > (gpu_truthtable, gpu_key, Ka, gpu_pos);
    cudaError err = cudaGetLastError();
    if (err != cudaSuccess)
    {
        printf("CUDA Error: %s\n", cudaGetErrorString(err));
    }
    cudaMemcpy(truthtable, gpu_truthtable, THREAD_NUM * BLOCK_NUM * sizeof(u64), cudaMemcpyDeviceToHost);

    u64 result = 0;
    for (u64 i = 0; i < THREAD_NUM * BLOCK_NUM; i++)
    {
        result = result ^ truthtable[i];
    }

    free(truthtable);
    cudaFree(gpu_truthtable);
    cudaFree(gpu_key);
    cudaFree(gpu_pos);
    cudaDeviceReset();
    return result;
}






int main()
{
    u8 key[8] = { 0 };
    
    u8 cube[N] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 };  //Reminder: Change the number of rounds
    int i,j,loc;

    u64 myconst;
    u64 result[64];

    u64 Ka[1000] = {0x857be19e928b16b8,0x09233c31d72db791,0x5a541e9cd8fe4e77,0x88b651d6f6fedb59,0x9bebeacef6da92b3,0xfc5463583921aa0f,0xec576e8439cc6fce,0xe566bee90bab72eb,0x5d7cf05ce542848d,0x8fc6b3c250d9052e,0xf6d0537c87a44855,0x6e05484929d30dbd,0x23a1226857bf78cc,0x039090537c3b8624,0xd6dbd7d7503ca8a0,0x1b71da2afcbd78c7,0xff9df6d9af845fad,0x8c3b74ea377ff73d,0xaab655f689c76cf5,0x3e0bd7d9d73c9114,0x3664d54400e3cfea,0xbbff1bd3d3cc055a,0x7d2dc887f8d30071,0xa3be45dba3300cbb,0x4fb17d1ec713f174,0xeea18f07e61b1c9d,0xca9004faed776d5d,0x0f6d8df64ca93a54,0xc0089a5522992fdc,0xa67f6c4c8d95a5a9,0x25301d882cf7bd56,0xd8b357881cec350b,0x6662df51c05e6812,0xcaf1a71ea60a0687,0xd19c1c82c815853a,0x1de8f33e00b06648,0x06214a2240fa144d,0x4d1c62cee63a8254,0x07e937f2083ff063,0xfb21318f32a6d730,0x22b657f734904205,0x40b17f53074e0667,0xee24dba386b51504,0x5a104a59fa82b53c,0x8a9002f61dd6ee48,0x07fd64bbf1dc2bba,0x912c5eccbde05fdc,0x628d3ba78936eeb3,0x8f511f10226a836b,0x128de7b79c621edf,0xc03d160006731eb4,0x6d2dcd777d61307e,0x03b6adee4c22e47c,0x90f534b7908a05d3,0x20a645b786716c51,0x2a891815d30ade08,0x5af6e6d017cd0d8f,0x746f8f78fbca2553,0x6903604df8bc3d43,0xa48bb0ce86282738,0xed95969ba409c748,0x383ad143b82228ec,0x4b3a66fb9459cc33,0xc4d36921f0ef34f3,0xe0a901b4d630c3ff,0x9c56fb0cf1c28d44,0x16b086e0b5099e9f,0xad9df1538b84a564,0x9766fad822cef5f0,0xa91c323c74880af8,0x8fbace0b567fc3f2,0x070c6610af48eb6c,0x00c912b24c71af8b,0xf075627f0e68973d,0x298b4b4197da950a,0x6d8d4bdc419baf70,0xa596ecdb21aa8e16,0xe3cad3011cfc761b,0xecc4f0b9dedf061a,0xdd53c96e71383389,0x54451043f0268e9c,0x4617f944bed426cb,0x0fa05b860b2f2502,0xd6fb913b5b428817,0xac1591a8752760f2,0xdd9ced95a6a3a1b7,0xd2863b8dcf4eb1cb,0x9a617ab9c08eab05,0x743b4d6ea2ab7bfd,0xe24114500928e45a,0x1d081b49b157c847,0x596f7b672df07180,0x0e4050c3f3ef4f65,0x577a5eb60417957a,0xcaccd6d9aa1f6584,0xa16b8c105e703301,0xafdd818b79f8d487,0x2f4e168345544d75,0xb84c05d8794b3fc1,0x1a86e330dedde784,0x368a6e5d30046091,0xa842505bdd265117,0xb88d7412d785f8cf,0xfc38553d5590dd50,0x68f26915d0637539,0x1e0118366ca9d8b9,0x065bd43340db1ff2,0x617ace37240e4e50,0x788291130d2d4346,0xf9a759a03fab04ba,0x24c51b77e855a81c,0x84306033485d5f6a,0xca9b8663196dedfe,0x1aa53334bee2a962,0xfa674379c9214174,0xc2849903187fb5e6,0x4bb71ac81a00abcb,0x814b2e6cfcf96909,0x4f29e49eb64be104,0xba549ef2ba01a45b,0x364031fa7c8b38b0,0xeda75749f0c60454,0x4bc89a2978ecedc8,0x34b9944d4edb6b9d,0x2d342f993961cbd6,0xf34da46ffaf1b80a,0xcf6855b1b66dc377,0x34193676b5da8bca,0x341d98b238733371,0x8fb22d39903e18f6,0xa930cd6cb3d1f6bc,0xc4b91dae3a75e945,0x37ffd597a04f6597,0x3108879fa0b77521,0xcdd3fd173b64a808,0x8cf489838c4f21fc,0x0e936d6c45e9edde,0xedf8113d8f8d7bf3,0xd1d444034f214b97,0x7e86f506d52c634b,0x6c981cdb8c516ac4,0x4d81cddd8d30b0fe,0x3ed52559f3f01359,0xe80e557a9c3fcd9d,0x8bd8cca416471d13,0x9d1678f5ac75081c,0x5d4f4fe370b1181e,0xfb337ecaaaab5a00,0x954e1b347798caad,0xecc4d8e91574d427,0x34a092ddde5a8ef0,0xfbd6367760cf1dc2,0x5eb1ec64ac001fa0,0x47d86bce39acef40,0xaafe770e5d1e3e55,0x083d7cdb5db4ed75,0x4b2712c5049d5685,0xaeba0afd97e646cb,0x61e225eec9c0eb3d,0x51590c5ef37de5a9,0x1f0621c9a914a3aa,0x5ffe70cff88c62b1,0xa424206ff938ee70,0x28044a4ae2658658,0xfd2bd12860ea4eb0,0x7c7423a48bbba60d,0x14b555840b2cba13,0xe743bfb87a272b1f,0x3fb2bbec2c5eb49e,0x2f03a559e3b2ff4a,0x15354c31c24ae9b3,0xb49c7774153d2c62,0xc40a1a1725ec1aa2,0x9aa0f5e3ed869b22,0x7e38c340cfa48927,0xaf54cdf4ba989624,0x5acacda1a3fc2277,0x9fd3c4b239591d59,0x64fe2989d6cb1994,0x123eab0c1526b657,0x77f6e37965a774a2,0x510da40b9ad22a1e,0x6749605e68d7bfc9,0x075a53c1a33e6956,0x081a13b3b0311777,0xbecb74567d799ed3,0x441920061ba286a7,0x8c7b98da781f4e1b,0xe1a5c35c01a9d979,0xc82900890deeacdf,0x8cafecc96a3de474,0x02742072f164c918,0x9022df3c8d4ff9d0,0x36c76c90e3cb2575,0x6c4650aa45d04978,0x2db415c7b1f5b54e,0x12d8da0d2410f38d,0x99554782440b2ee0,0x4307cb322736c791,0xa3c4efb818a30222,0x7891d8579c728b3c,0x59f10f74da780d70,0x36f86ca66fa7be77,0xa76a5106828138b0,0x36b6da5cecded7d9,0xfdaa9deb8efb1b27,0xf951bd39c1c9bc00,0xd20e62eda1545277,0x676f4f302f22ad7c,0x911be16e19258258,0x600bfb2fcafa403c,0x4087c56eea3e48e9,0xd018b8cfd6ee2409,0xd50f12ba1628bdc5,0x71395ab27b3fa093,0x046a225a0676d09a,0xaedbd69d02f557b2,0xe0ed0189152680be,0x47c47b52777da8ba,0xb6de14d1c60c6991,0x04214a5ec2951b42,0xd21ae390afe0393d,0x73ef8a9717f13e6a,0xb999754359db23d1,0x78c16abf48c3da6b,0x5cc9524415afbe8c,0x40ec0628df489156,0x69ed5142ba239eaa,0x45ab7a9be65b2c2a,0x1550b537b916a6b5,0x982436fa621e264d,0xdb3999602d251709,0x8c667498882896c5,0xfec14061361976b0,0xe929f6c4e95fa7f4,0x893c1bc4d421fb93,0xfae7135175324ed5,0xdf235f87535e5857,0xd436bb97c3e8acb9,0x375ac2c93202a8b7,0xbbd29cab05d135a5,0xe92c45ba0ca15b5b,0xaad9b8ef4bfc0bf9,0x9a01b5060cd5cd76,0xeba24d572b7ae19d,0x38275258634b33da,0x962a06ac381ee137,0x2338ee123e435df4,0x41aa53a0bd93da83,0x3f4390f5e478fe17,0x341a9536519da8de,0xccea8b74ffa12b47,0x94e99bd6fc4c719b,0xa307ed8cc9321a5d,0x07b7087b7ab79c5d,0x6e41a63c8ffdf919,0x72ea0b663b6dd971,0x76687c5204037479,0x4244409b14043e72,0xaaa0257ef00e3985,0xe47f8c836e31494d,0xbcaedc90d92c20b2,0xaf3a7d3d521f5aa7,0x96e2b22c6dae8cb2,0x5dbba01acef0ad3a,0x0ca5717af79e72ac,0x9daa3d3c3bb3a89c,0x7d4c0f29bff1387c,0x11045b5ccd52d3f7,0x0c13785d488ebc43,0x6bd5ad039a396f25,0xc782466e04726e05,0xcdca0e83b61a4104,0x058bd75ed00b9617,0xaf57c90d6055b400,0x9f1cd8c3e0b73f3f,0x27a387b05bbbf497,0xc6fc9f4c886ae3b4,0x741a3e92113c1229,0xe3b8c13e11ff9672,0xcf3cfe0ce82ae18d,0x34c877fe90a1165b,0xa9bf372cc9d54338,0x8d9b78bd6e332e5f,0x9cd4f298976ead79,0x9a394b044f6c4c58,0x8d2a7c0a1a5a9ca7,0x0bafa1d0a128250a,0xc518f559b3857eb5,0x72e1544cbe67d908,0xf5f3fcd776efdf3c,0xd53956a7518141d1,0x77a4ae83c94804ab,0x0fcd1677560735c1,0x404e140b116a5998,0xced0129cac51ed2f,0x6b0a34f9268644b5,0x65c8eefe0fa7d21a,0xf28d2dcb2f5ec609,0xe087e1b98f81bdfd,0x37db466a47de4518,0x1eeea44084862e8e,0xc848076c8d3f51a0,0x1fe61f57fe2be217,0x6f2b36d547027c88,0xda0122aa7216331b,0x93163a312e153aa4,0x133cc2509d1439e7,0x385bc8cb5e7c64d4,0x2b25434918119f53,0x384e46ea67f3a604,0xc2668fb67abf8b6f,0x3bde874d38c320fd,0x225eb25187d67b67,0x3bd6e4abe03cfb33,0x18f79e1771f81a29,0x9251b0f2f17e0199,0x363b7f1c991d35e1,0x974897d0dc6cf012,0xa1f0b86414b5baee,0xcceaf26646b300ff,0x0c486a251e4f99c8,0xaff1deb23dbef2e0,0x54841446053954c0,0xb0601b6704fabc6e,0x271368c93952d8ba,0x37960f87beaca45a,0x38ec81d771cfa18c,0xbb2389dfe090358e,0x58988142df94988e,0x4350efd2aca3f294,0xa2a3dc1fc95a8ee6,0x18b0a3e4883f10de,0x342aa97a420cbdf3,0xd524c6cef053bf44,0x2f892611f5b59560,0x22e6a0da251c94a8,0xb1d4351e68a2c1fd,0x3024a7bca1dcea5e,0x3c62b66e962c3fde,0x28406f6c9bbf6d48,0x1b6da220728dbd21,0xbe8ae994e975c101,0x0268611a38e70a2c,0xb24967fcb1be640a,0xe6198fd92d82ec46,0xb99b2e980b32f6ab,0x10060711cd98ad2e,0x7cd7d7d518b2b01e,0x3442412241925c9f,0x9cada59f62c7d1d5,0xb19bc57de70c5588,0x148b44c4c7fb422a,0x7f67f93ea375bea5,0xd0f41636b3f9522f,0xd30a153cd1eed8f5,0x6c587ba8d7f19606,0x2f6adca3b4cb8442,0xdea98770a7f78d95,0x222653fb9fb3190a,0x7eb599868fa1ab31,0xbb01f7c3e9b3a753,0x466ee591975fbd58,0x7a20d9e748f3d675,0x351d3ee27df78bd4,0x769a710832336870,0xb406e88cb9b080ad,0x35025a0545be23c2,0xfe8c4a5c96b32f01,0x02919c97e33457c0,0x938b3891f55cca50,0xd9997898bf503abe,0x56729c144d4dfd6e,0x95d58015b38e88ac,0x8202589792a84c42,0x5fe4e14a4500d4d2,0xd6f4cdf4666883a7,0x593b20b0abba287d,0x0f27cddd533ae06b,0x694a1af1bc95c3d7,0xdbca7d5c49b3b336,0x0df24416e3d04225,0xca3b2a20cceb2e0b,0xc5d26c69f97b39f5,0x420f663904dbb3f3,0x749b69ed642b9b54,0x9d49733b1b93df99,0x1976782779abfd74,0x4e14c22547c277ee,0xbfa50fd35a683006,0xa4a45ee2dfca4894,0x621d06c011eb3b85,0x71ee88362c039338,0x3b298337dae1b8bf,0x13a8461b7c798184,0xf5d408316cb2db2f,0x4021eeb47c2bfd45,0xcf527496f9ff61a5,0xd6dba21712ea60ff,0x9c0a0675bb727b61,0xbb2fcc39dd3e03f9,0x3e19956be0471277,0xbcdc7423292e55b1,0x48748252921dfa08,0xd4f97fe594e88c01,0xb271fb0d1426ba69,0xd408500e4ffb93a1,0x802249c6d0c58080,0x16a46bb4aa371480,0xdf7a597c7faadd38,0x2f6e82e0421689e4,0x997ab5ad22687761,0xca2ed2c478a9ce0a,0xa14f7af106fc28a1,0x1eea35d37b485ede,0x9d0a99ab08c45adf,0x5609d498b047592c,0xb06a188c45974817,0x4ae8dfe6ce44a4e3,0xf022d910245c712f,0x01b2b35c38bbf94e,0xf539935128c5f1e3,0x0b3beed79e22c917,0xaa22d3948e5cf04e,0xcfd446614bac1a50,0x31579e7f81dce0bd,0x21723ebc4a8fd4e9,0x18a100155cb0c32f,0xed3e38ee4f0ec99e,0x9a1dfcafe0182f4c,0xfbddb0bad18dfd2c,0xbc5609443778a928,0x7fb50a8b042aa0f1,0x0014ea725ba0f7d1,0x3af8d1a9fb0df4ca,0x299666370564df77,0x6a9e464a8dff85ee,0x10ea1c3301c08c4e,0x5252aeca04e665c9,0x55440735cadcbab0,0xd4422248d6a2478d,0xc245608794eafd2a,0x3589d714e509db3c,0xe53d5c9768dd95fe,0x707fd64e994744bf,0x523c3f9e87a8e2fc,0xd021da2e7e30b363,0x4ce7043e0c8edc08,0x28e49b17f2698c34,0xdc323f9473365037,0xb8020ec51c5acd6a,0x5759ed7c9870776a,0xf4acc5170caec09b,0x955fd85792e3e92a,0x96bcefc21c1d199c,0xdb685cb3dc85f030,0xc9ffb114ddf6adad,0x9511b26bbbc46d26,0x365847ff0139af3d,0x3b39629e63b5cfe2,0xedc49ca2371b425c,0x0e6e772a577fb508,0x8b05f12bbc323608,0xa58ac9f333a299df,0xb671c09fbcaa009b,0xb364616fa3cc56a5,0x5ad9cab59f5f83ee,0x2988f07945e26fdc,0xb16eb12437b92f90,0x9a424e6ae8951579,0x05979bdc7f9d67e9,0x1b042facb04cb239,0xc4a1d1a8cdff1044,0x3f8d78d2c252a250,0x23208d8491b449a0,0x000472ebe0e70ebe,0xd7437e36347ff6c0,0x3e6eefffb113fe6a,0x188a768af4d1beb2,0xa4306e7173440d83,0xf6b66de01cf4058b,0x57a377dc92d092f5,0xa117f38f079390d0,0xcb63b6a7eaf44b7e,0x61470f8d76bbb2ee,0xc630409c5abc89b9,0x248bf4ceb3913364,0xd9d88a94643b8bd1,0x5fb3f7557d4bc27e,0xb86f558f63bcf37a,0xba1da841b615893b,0xed22ea1b6561d568,0x67bb58095cee1d39,0x4ae4a89c18da58a0,0xf050e69ef3d1adc2,0x7cc96cdbbe0b6813,0x7f1c3aad751548b7,0x48f6ee55b1296e18,0x0c9634ab00fbed61,0xee64860c5496e6b3,0x7b6d8c0344bad573,0xf6e52bf393dbbb70,0xf4cd3ee75975bcf4,0xd7cc9df4447f58b5,0x43fd7dc0fb1e263b,0x5c30273b4db3b77a,0xa8f7524e89a152dd,0x0d5e57a513d34251,0xc61364530581fa1d,0x7fff8db0d13b70aa,0xaa7d8e01fd007cef,0x1316b4f892d58ed8,0xc7a1bc8d948da405,0xcf54450d50445ea8,0x7dcb07cdd5a4e520,0xdad369ad4ff8c5f9,0x2e794f3d00d1b644,0xe12cd96b1f3dae1b,0x08ae1518bab81636,0xab93de5c834a0aec,0x7cfecbf99736699d,0x7c68669f58aa7d24,0x10f776953ebf13b8,0x599177c2378848df,0x4c6871b7d67a51f8,0x9c652ac15d76b905,0x0b57a861d310adf3,0x92d84364e86b92cd,0x2ec9f732170ddf8f,0x8bd4bc34dd8366d4,0xbbaf37a696739cc9,0xcc367c4591b64fbe,0xfdf50a31a3adc242,0x129e4bd22232612b,0x09b6155904ebb590,0x0c33a209f48417d7,0xbc4935efa6fc6579,0xdc0be7efcbd71375,0xbb02705d6f260ce6,0xdf7cb9d6c75dc319,0xda7b058e1a6f2113,0x94d5570a0f2a0504,0xab0c4d6cbdad8f93,0x3536a3ab37b8c397,0x325528ff1554f9ae,0xb05af075b36ee79c,0x8d396487479510c3,0xf33ab96ed7e6d02c,0x39bb34e1b24b3640,0xe92a0dbcb6d8c94f,0x7cda70a44fe0c4a1,0x3c7896327dab7313,0x5fa31fd83d10aaf8,0x57a9419fb9c54a90,0x45910a9311f098d6,0x1b7eb484d7fc9150,0xba999054a57a0163,0xd0ac806b580a3921,0x85acde09c52b39e9,0x6ac5ad18395eb6b2,0xb80fc4cf1d7cd281,0x2643a751cca74dd0,0x027b1f5fca656a42,0x5164dcef58bc6a1a,0xbc2a7f0bd33d43a1,0xe4f14a9681f46f63,0xc5463d0c2622c360,0x3281604c6374dabe,0x3e933e349390f274,0xa739e5414fdd94e3,0xcc305ec46e92720d,0x14de029d4ef3b429,0x8b0826190050206e,0x6c5211679fc89230,0x187c11ed87b89f82,0xd2cea60a464f5f8b,0x077d5bb92d8fc306,0x2825b6d9ecc50bbf,0x1eb54cebaa3e5649,0x8d0ec63d11795f5b,0x03d2f3865b9f8571,0x6b42315182758d1d,0x5815bbc8f61f8ad0,0x1086b80a97adc26d,0x548641e5b250e42c,0xc6d0b7e95c9c2cad,0xea3fbc761508e14e,0x4c150cffe16d66f1,0x970170e5d7ad134f,0x96e918670e464c95,0x0f1f2eafe142076b,0xacfcbc27d65ec3b2,0x4ae78abcb72de03b,0x0b86fd6175b93e33,0xa902fa1dff22ab2d,0x11003e7c65348c3c,0xd15b89f50f3f4b0d,0x18d22b30c5a0e571,0x6ed7de7cb8b9010f,0x67120d12ff5d5b7a,0x940850f2ff1f9195,0x23da0029deb35d10,0x060bf90beb8a4490,0x858600167939ac53,0x6992fd79865717d3,0xaccf73acadb1a891,0x656420f158748774,0x1cc34fe2336e3917,0x559b9b41e43060fe,0x357c271e21b26c0e,0xb848dae72f1870c0,0x4c36bad42b59456c,0xec295b5b16c544cb,0x6514a2676fa7c916,0x0a2fa508d6d4dbc9,0x20c8c062e024217d,0xd47547407d2a2b7a,0x795e9309203c061c,0x34ec3e47e6e06fa7,0x6fcfa1bfb4b77b9c,0xbccd379b5e608836,0xccf92493a8bc17cc,0x89869a2c3f6b630f,0x5139e685fca5abad,0x5cd030d56a0ad203,0x48441950f1de6314,0x1a826393096e61e6,0x5d0a75d45daf2b33,0x8160bcbd783c0ae3,0x21b73efd8c4b7c49,0xdf97b04d6403a176,0xb00b7a5bcbda2578,0xb688af81980a3252,0x038417ddc4ce4827,0xedf865ef397f2553,0xbaadc4070086783b,0xca6210ab609ec851,0x25bd42eab20e5f15,0xed4116043da49190,0x467b704ab28394dd,0x3922292c423f452e,0x7a35c2a11d90817c,0x96e027c89979b3ae,0x872d6d508a0bf9ae,0x0ee6e869eac7dded,0x38154232cd7bdc7a,0xa167788a70c4412d,0x7e46cc2d08224b68,0x817065e5c21166c5,0xb8868bba61417c56,0x160b9563dac10110,0x84f6c52402c7817c,0xf548cd592e9e23e4,0x202425968b568041,0x6ce99cf522ecfb6c,0xeedeb53404e8b49d,0x36ec4a5bd7997798,0xcc7dac32f4f225df,0x666ddaeece5146bc,0xcfe17be7566d51cb,0xebaaebb008a0d3c6,0x9cf5b44491497654,0xb61407cfaabccc3e,0x06cd2806e78c4ee8,0x74aebde1e3340f6c,0x782920e2fd5ad6fd,0x3613efc144ae9287,0x747186ceb6d39246,0xc67acebcd24de482,0x757066f0390eed2b,0xc03d3db202905a7a,0xc409aaaf2a92e613,0x4d585b1cb843c626,0x6560c484025dd772,0x1a4a720023b34c79,0xd55e77fdd16d844e,0xe02ee2c08617e546,0xf7287d17956410b3,0xc932f266f4aab039,0xbe571ab3dd8dce18,0x9e3ab6c44f0158a3,0xe338cf0dfc8d1db9,0x394ff34dc74c4479,0x3532d6831a894ef0,0x29d1ddc673d4bb01,0x60d0739600b9d4b4,0x174a0e88f05b3d63,0xb778826edc4099ab,0xb99afd2fb337f87c,0x7b47176acae3dba9,0x8cf75b03096bb3ff,0xfc6a631126580f07,0xfecf881e3ce7a07a,0xdf982d27c76ceb90,0x9a369c5f4fc086a9,0x4366f4cc43583b6c,0x397d3860df62e428,0x76ac67ea5843377f,0xaa4c2cf332e720f8,0xe0a0a03662cbf83e,0xe721ac3315fb2efc,0x4c08e1cde876e89b,0xf174e1f5acfc95be,0x497f57cc703ff00d,0x31cec50490b3786a,0xa84702b613d36451,0x83fb082a534348f0,0xad69749064673bb6,0x4a5320daf405ed63,0x6f8d47d004fc938a,0xd42eac82f98193c4,0x6278655dea65ba04,0xe32d7dd131e19beb,0x4d074dcb03514484,0x49a30c2b8307dab4,0x09cdd31cf7a6324c,0x5403880f41adbebe,0x4ef52a60347a1f73,0x8e7fbf2a0a075cbd,0xa048c4c8ff14cc7e,0x626491dd3e6312c4,0x37ed5e908506f9be,0x8e8fd30e14a96339,0x8b720dc5a9667c52,0xea0c08e553587bd5,0xac0f96466dbb3a11,0xc8f3437ac69d949b,0x06374e6d1dafa9de,0x6644fccf1aab2b64,0xcbe92499e451a9cf,0x49eb44fe62d914b4,0x3cbf2cff41ed32c1,0x02ef9e901b5955b2,0x785d05b4a7831ef7,0x51504773f19914c3,0x786336b289f1b351,0x74d6f29360e3a0c3,0xfabe84a4d6a2c584,0x7d9b80af0cebdf66,0xfd3cb0fe8fc2daf7,0xe88cbf805e3bf4d9,0x3bfcc7416039d1ca,0x85f7e7d3035722b3,0x090b720fbbe34d6a,0xdbeffebfc52bc4a1,0xb25a1f912ebf4212,0x831bbaf79678391c,0xe7eeb08398cd38fc,0xfc7d9f4826c85cbf,0x2d16e6c77c08e33a,0x9066abe4310bc65e,0xb4eaf26ea111fe09,0x6d5c3d662e7938db,0xdf58192f8370c72a,0x6c844aebff17ff0f,0x319eb657543ef110,0x860fd7ca09b4d889,0xd8dec7073d76c5eb,0xac788be10b0b040a,0x39c1ad55f3fd0ffa,0xf825d4044d84e625,0x1827b3b8112e933b,0x59b1215cffa712d8,0x512f1ef5863a6b9c,0xfd97a9f41dd51fc0,0xc3902792f670eba6,0xf9c520c67ed67e94,0x34db1edbc4b32fe3,0x177f8aeb8d572ef1,0x73d60ba7627b4fe4,0x7b1e96b0c2858422,0xdaad8c623bf3023e,0xbe4388a3c6d16f85,0x63ca0014d75dd392,0x8606e137788b26e2,0x9b10226b17057198,0x7e1092465dd8a245,0xae0f5b0d643ddf0d,0x82b04a18c60f41cb,0xed005721308c65ec,0x54c9e470c1430dfa,0x35070473c9286bb2,0x854c8af9a62d6725,0xfc507f7f9cf54a08,0x5b6200fc36ca026f,0x2ff5d517a1d5d6af,0x4c01f9a06f178d6d,0x9e839acb31588b34,0xbeb8ca3e432c1df9,0x9928dbafd9f2d55c,0x27da8bf488035ce3,0x1e6768f8db04d7a2,0xba4199d72fade36d,0x0c8a785b849d490c,0x744218993668ca7d,0xe64cb5ccf2ab1593,0x7baa62788b5d61d1,0xc6a75168cdeb7089,0x39cc3f04b4184d71,0x02eb8104beb4412d,0x330b132fb989e811,0x331406b1876faf0d,0xc2e1c2c4c03c9c27,0xb8159f52b6d09147,0x2b921664fe764a64,0xf43560496eda6272,0x156d700187ade238,0x4e69974a3ec8aa2d,0xec65d50d880774b8,0xaedaa3396c926f4a,0x1fd200f882645763,0x89fc6eef94a9f2a9,0x16ec564c2d1a5e49,0xc605673d19d1880d,0xbb26ed76671aaca5,0x10582e1ee8d7b1f8,0x18ae6a8b107acbe1,0x7616531408dd4c0e,0x1736ba3502c2ab4b,0x78c2d0b6a8b40d8b,0x78ff3f8e179899a4,0x769b62ab5a0de134,0xb7af07f1638a84cc,0xc20f07a9f741f1f3,0x60bdd2c63a52cfd6,0x7b82686cba9b96f5,0xb2adb141774e5feb,0xa2155d863efdb383,0xfd0654cf1e86e06a,0x0616cfbf301113cf,0x21145563f472f083,0x7f316d66965d435b,0xdc3c37f88134e8d6,0xf2766269772c36f3,0x0829bd645b4f62e4,0x505de7534622e414,0x212d4dfebcd312f9,0xbb5dfd600d1a0450,0x506a68d2a2bd9156,0x81489e62535c2112,0xcf1b117a0546ed54,0x4f8849c4615161fa,0xb50fc1e0934ccc57,0xbf7528100a352ebb,0xd77e5a1a53476937,0xd0ae22390e4960bf,0x2516d7c79dfc0733,0x7976d9b70bc3835b,0xf75ab6da37f7f4a8,0xee257a6d391ca56c,0xc9a679b0e4cf0ad2,0xf4cf2c2269019ef7,0xe554a5f64de23d14,0xe168a7aae444e9b3,0x93ee03d29ecd85a7,0x5c2896d170eac6ce,0x8a6a1d5a5c2827b1,0xfe4c331a57d18fea,0xe10f5f5d33a2866e,0x84d4c7631bfbd9cf,0x39ee4ec36ed4f7f9,0x81b9b02b4bc612fe,0x878b4990b455692f,0xa576f36d37641537,0x7c8d841cdd769d2a,0x1919965a8814bfc5,0x29984bff77bbc042,0x53971650dc64694a,0x3e0fd1d2661a4b6f,0xbb422858ea27a408,0xf9bed253b23573b1,0xb121d1811921ab47,0x63111bac3446a883,0x1cff091bcfb996cf,0x1ac09d546165764e,0xf081bbd109c13f53,0x9562a261f2f1cc1e,0x4b21ea311fca8d6b,0xb838f0dcff6ab597,0x08b40b33dc985b4b,0xcb9feb76c998d9a4,0xc55efab3e49ec598,0xc4b17bd91e8f445b,0xa908722d897343e2,0x7596b551ebf0501a,0xf9adf986720ace43,0x4cff423200fa3762,0xbc8cb63d018955e6,0x0a219d627beec1f7,0x3b4145f88aa192fb,0x7e73475dc6aad897,0xea32e4c674196cee,0xfb8df3d882a6de93,0xec994ed23055ca53,0xda4bd2e4e41ddcd6,0x3a3c531b980d2cbe,0xa9469e2a8f82d1c1,0xbc23bf8c9b9fb07b,0x624aab49e6f4eee8,0x3be4650be0d6cc69,0xd487966990de8319,0x19fa92cb45ec0283,0x4b7a36233c9f1adf,0x5bcceb3ddf313c1e,0x54af4ab11da7db59,0x13d6ac694b219e42,0xb41d6d28f5fdcb5f,0x0474e2e57e109334,0x3e62d309441059f7,0xfe9d5f270113501d,0x99d5cd2dd24b62d5,0x529c9a50e11e0a92,0x2a571e2949484711,0x141caa8abe17a964,0xac15b06c2d61d8ee,0x7733d431103bbe66,0x0fa8c41b804a812c,0x97253532c9f394da,0x667562c4cde4ccb5,0x4836c0ce34c85c83,0x93c6f28efcc3e667,0xf5f18da915fef5fc,0xdf183f5d955896e2,0xbbfe2a2a5da3f9f5,0x79c0f1559adb536b,0x741503d89b6429e8,0xaeee0ec449a3b35f,0x7a52d78c496b71dc,0x08d683ff08a85ec8,0x3f9bb111569a0c8c,0xe6bc7178851c88f7,0x89cdec6d86270a6d,0xc88466df7781ffb3,0x874a508535f498a7,0x1158402f567f3857,0xb058c39aa3f12232,0x6254649b20618a98,0x6c8075b3867ec911,0x248a127a8a76c5d4,0x9446a1e7215bdf99,0x9b04a466728cd6bf,0x052609c16d4aa05f,0x4ba4e5f2078439a1,0x924647e08f20c715,0x7231b31f961b519c,0x27cb76d4a41c9a91,0xcf3ab8eab11fe736,0x98a0d5a9de3af314,0xbda70a74eb37017c,0x8cb06168fd598a53,0x8169ccefdb5e87e7,0x5d4889a014429886,0x821c279580a5b1c4,0xd881d3151c7309af,0x9350a43c807e0ccd,0x42f5fe6d8fc45df7,0x44fcd7432b6ebcfd,0x80fe9ec6e99eeedf,0xd66c18ab3a84d0be,0xe98114da779b98ff,0x25ada12d8362d5e2,0x35c9abaab751e6dc,0xa0ebba05b6740637,0x68c47febb746936c,0x6fc3dd35c42fa913,0xbd98197757cc87a3,0x1359fbbf133c91c8,0x660cd6e220ce8913,0x3e440bbbfd5f668e,0x4fa58a5197130c60,0x284181d3cfc8ec23,0x2c3312302191457d,0x9c01a9e681d03a29,0x31f2763995af34f8,0x6eb8c30dee1aa9f2,0xe14df6b0823f0f91,0xb7e7bd19b161d097,0xab34ed538ddf3514,0xf9a40b4c40df5ee0,0x78094d8127071c45,0x3d7c1b6af4037e18,0x069a480b46975973,0x7d72cd66420b7339,0x71ce59d614056b23,0x375841581aebd3fd,0x240ca760712dfc2b,0xd89deed3c2966146,0x0e2aa744516a0153,0xdf3b3c6f180cb88a,0xa358d52f2ea54871,0x6a837e873ad88253,0x753f2ef8cff13e19,0xd2046e26cb5a87c7,0xedf5736a1b145c2e,0x079bf00a73bca39e,0x251326cb0d758a6c,0xef594e6dd8f06a47,0x8a1b742315f7fb3a,0x8b7770ee90638b70,0x0f5c168c22e86142};

    ofstream results;
    results.open("6-round_Ascon_31-dim_cube.txt", ios_base::app);

    for (loc = 0; loc < 1000; loc++)
    {
        cout << "Test " << loc+1 << endl;


        myconst = excute(key, Ka[loc], cube);
        //cout << "Const: " << (unsigned long long)myconst << endl;

        for (i = 0; i < 64; i++)
        {
            for (j = 0; j < 8; j++)
                key[j] = 0;
            key[i/8] = 1 << (7-i%8);
            result[i] = excute(key, Ka[loc], cube) ^ myconst;
            //cout << "k" << (int)i << ": " << (unsigned long long)result[i] << endl;
        }

        results << "Test " << loc+1 << endl;
        results << "X_1 :  0x" << setw(16) << setfill('0') << hex << Ka[loc] << endl;
        results << dec;

        int flag = 0;
        for (i = 0; i < 64; ++i)
        {
            flag = 0;
            for (j = 0; j < 64; j++)
            {
                if ((result[j] >> (63-i)) & 0x01 == 0x01)
                {
                    results << 'k' << j << '+';
                    flag = 1;
                }
            }

            if ((myconst >> (63 - i)) & 0x01 == 0x01)
            {
                flag = 1;
                results << "1";
            }

            if (flag == 0)
                results << "0";

            results << endl;
        }
    }
    

    results.close();
    return 0;
}

